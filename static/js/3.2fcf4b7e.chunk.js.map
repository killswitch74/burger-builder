{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["module","exports","CheckoutSummary","props","className","classes","Burger","ing","ingredients","Button","btnType","click","cancel","disabled","price","continue","ContactData","state","formIsValid","orderForm","name","phone","email","street","landmark","pincode","country","delivery","payment","redirect","history","push","orderHandler","event","preventDefault","formData","key","value","order","userID","submitForm","changeHandler","id","selectedEl","target","newOrderForm","validation","valid","checkValidity","touched","Object","keys","map","curr","reduce","acc","setState","modalHandler","prevState","modalClosed","modal","type","configType","configText","required","options","elementType","elementConfig","current","placeholder","maxLength","minLength","emailCheck","formElement","this","config","form","error","style","textAlign","fontSize","Input","change","label","invalid","loader","Spinner","color","Component","connect","totalPrice","auth","dispatch","orders","actionCreators","withErrorHandler","axios","Checkout","cancelHandler","goBack","continueHandler","replace","match","url","setTimeout","window","scrollBy","top","behavior","Fragment","path","component","to"],"mappings":"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","file":"static/js/3.2fcf4b7e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3iGkr\",\"Button\":\"CheckoutSummary_Button__3nqEA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__2h_06\",\"Button\":\"ContactData_Button__2b3v3\"};","import React from 'react';\r\nimport Burger from '../../Burger/Burger';\r\nimport { Button } from '../../UI/Button/Button';\r\nimport classes from './CheckoutSummary.module.css';\r\n\r\nexport const CheckoutSummary = (props) => {\r\n    return (\r\n        // <React.Fragment>\r\n        <div className={classes.CheckoutSummary}>\r\n            <h1>It's yum and all ready!</h1>\r\n\r\n            <Burger ing={props.ingredients} />\r\n\r\n            <div className={classes.Button}>\r\n                <Button\r\n                    btnType=\"Danger\"\r\n                    click={props.cancel}\r\n                >CANCEL\r\n                    </Button>\r\n                <Button\r\n                    disabled={props.price <= 2}\r\n                    btnType=\"Success\"\r\n                    click={props.continue}\r\n                >CONTINUE\r\n                    </Button>\r\n            </div>\r\n        </div>\r\n        // </React.Fragment>\r\n    );\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport classes from './ContactData.module.css';\r\nimport { Button } from '../../../components/UI/Button/Button';\r\nimport { Spinner } from '../../../components/UI/Spinner/Spinner';\r\nimport { Input } from '../../../components/UI/Input/Input';\r\nimport * as actionCreators from '../../../store/actions';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport axios from '../../../axios-orders';\r\nimport { checkValidity } from '../../../components/UI/FormValidation/FormValidation';\r\n\r\nclass ContactData extends Component {\r\n    state = {\r\n        formIsValid: false,\r\n        orderForm: {\r\n            name: this.orderForm('input', 'text', 'name', '', true),\r\n            phone: this.orderForm('input', 'number', 'mobile number', '', true),\r\n            email: this.orderForm('input', 'email', 'e-mail', '', true),\r\n            street: this.orderForm('input', 'text', 'street', '', true),\r\n            landmark: this.orderForm('input', 'text', 'landmark', '', false),\r\n            state: this.orderForm('input', 'text', 'state', '', true),\r\n            pincode: this.orderForm('input', 'text', 'pincode', '', true),\r\n            country: this.orderForm('input', 'text', 'country', '', true),\r\n            delivery: this.orderForm('select', null, null, '', null, '- select -', 'cheapest', 'fastest'),\r\n            payment: this.orderForm('radio', null, null, '', null, 'prepaid', 'COD')\r\n        }\r\n    }\r\n\r\n    orderForm(type, configType, configText, value, required, ...options) {\r\n        if (type !== 'input') {\r\n            return {\r\n                elementType: type,\r\n                elementConfig: {\r\n                    options: options.map(current => {\r\n                        return {\r\n                            value: current\r\n                        }\r\n                    })\r\n                },\r\n                value: value,\r\n                touched: false,\r\n            }\r\n        }\r\n\r\n        else {\r\n            return {\r\n                elementType: type,\r\n                elementConfig: {\r\n                    type: configType,\r\n                    placeholder: configText\r\n                },\r\n                value: value,\r\n                validation: {\r\n                    required: required,\r\n                    maxLength: 200,\r\n                    minLength: required ? 3 : null,\r\n                    emailCheck: configType === 'email',\r\n                    valid: false\r\n                },\r\n                touched: false,\r\n            }\r\n        }\r\n    }\r\n\r\n    redirect = () => {\r\n        this.props.history.push('/orders');\r\n    }\r\n\r\n    orderHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        let formData = {};\r\n        for (let key in this.state.orderForm) {\r\n            formData[key] = this.state.orderForm[key].value;\r\n        }\r\n\r\n        const order = {\r\n            ingredients: this.props.ing,\r\n            price: +this.props.price,\r\n            userID: this.props.userID,\r\n            ...formData\r\n        }\r\n\r\n        // Managing state through Redux\r\n        this.props.submitForm(order, this.redirect);\r\n\r\n        // axios.post('/orders.json', order)\r\n        //     .then(() => {\r\n        //         this.setState({ loading: false });\r\n        //         this.props.history.push('/');\r\n        //     })\r\n        //     .catch(error => {\r\n        //         console.log(error);\r\n        //         this.setState({ loading: false });\r\n        //     });\r\n    }\r\n\r\n    changeHandler = (event, id) => {\r\n        // Step 1: Change the value of targetted element.\r\n        const selectedEl = { ...this.state.orderForm[id] };\r\n        selectedEl.value = event.target.value;\r\n\r\n        // Step 2: Make a copy of the original 'OrderForm' and SAVE (ONLY) the changed element to it.\r\n        const newOrderForm = { ...this.state.orderForm };\r\n        newOrderForm[id] = selectedEl;\r\n\r\n        // Step 2b: Check validity of input.\r\n        if (newOrderForm[id].validation) {\r\n            newOrderForm[id].validation.valid = checkValidity(newOrderForm[id].value, newOrderForm[id].validation);\r\n            // console.log(newOrderForm[id].validation.valid);\r\n        }\r\n        newOrderForm[id].touched = true;\r\n\r\n        // Step 2c: Form Validity Check.\r\n        let formIsValid = false;\r\n        formIsValid = Object.keys(newOrderForm).map((curr) => {\r\n            if (newOrderForm[curr].validation) {\r\n                return newOrderForm[curr].validation.valid;\r\n            }\r\n            else return newOrderForm[curr].touched;\r\n        })\r\n            .reduce((acc, curr) => {\r\n                return acc && curr;\r\n            });\r\n\r\n        // Step 3: Update the state.\r\n        this.setState({ orderForm: newOrderForm, formIsValid });\r\n    }\r\n\r\n    modalHandler = () => {\r\n        this.setState(prevState => {\r\n            return { modalClosed: !prevState.modal };\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const formElement = [];\r\n        for (let key in this.state.orderForm) {\r\n            formElement.push({\r\n                id: key,\r\n                config: this.state.orderForm[key]\r\n            });\r\n        }\r\n\r\n        let form = null;\r\n        if (this.props.error) form = <p style={{ textAlign: 'center', fontSize: 'xx-large' }}>\r\n            Something went wrong. Please refresh!</p>;\r\n        else form = (\r\n            <form>\r\n                {formElement.map(current => {\r\n                    return <Input\r\n                        key={current.id}\r\n                        elementType={current.config.elementType}\r\n                        elementConfig={current.config.elementConfig}\r\n                        value={current.config.value}\r\n                        change={(event) => this.changeHandler(event, current.id)}\r\n                        label={current.id}\r\n                        touched={current.config.touched}\r\n                        invalid={current.config.validation ? !current.config.validation.valid : null}\r\n                    />\r\n                })}\r\n            </form>\r\n        );\r\n\r\n        if (this.props.loader) form = <Spinner />;\r\n\r\n        return (\r\n            <div className={classes.ContactData}>\r\n                <h3 style={{ color: '#606060' }}>Your Contact Details:</h3>\r\n                {form}\r\n                <div className={classes.Button}>\r\n                    <Button \r\n                        btnType=\"Success\" \r\n                        disabled={!this.state.formIsValid || (this.props.price <= 2)} \r\n                        click={this.orderHandler} \r\n                    >\r\n                        ORDER NOW\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ing: state.ing.ingredients,\r\n        price: state.price.totalPrice,\r\n        userID: state.auth.userID,\r\n        error: state.order.error,\r\n        loader: state.order.loader\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        submitForm: (orders, redirect) => dispatch(actionCreators.submitForm(orders, redirect))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React, { Component } from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { CheckoutSummary } from '../../components/Order/CheckoutSummary/CheckoutSummary';\r\nimport ContactData from './ContactData/ContactData';\r\n\r\nclass Checkout extends Component {\r\n\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    // Managing state through Redux\r\n    /*\r\n    componentDidMount () {\r\n\r\n        const query = new URLSearchParams(this.props.location.search);\r\n        const ing = {};\r\n        let price = null;\r\n        for (let param of query.entries()) {\r\n            // param = ['Salad', '1']\r\n            if(param[0] === 'price') {\r\n                price = param[1];\r\n            }\r\n            else {\r\n                ing[param[0]] = +param[1];         // Adding '+' to convert the value to number\r\n            }\r\n        }\r\n        this.setState({ingredients: ing, price});\r\n    }\r\n   */\r\n\r\n    cancelHandler = () => {\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    continueHandler = () => {\r\n        this.props.history.replace(this.props.match.url + '/contact-form');\r\n        setTimeout(() => {\r\n            window.scrollBy({\r\n                top: 650,\r\n                behavior: 'smooth'\r\n            });\r\n        }, 100);\r\n    }\r\n\r\n    render() {\r\n        let ing = this.props.ing;\r\n        if (ing) {\r\n            return (\r\n                <React.Fragment>\r\n                    <CheckoutSummary\r\n                        ingredients={this.props.ing}\r\n                        price={this.props.price}\r\n                        cancel={this.cancelHandler}\r\n                        continue={this.continueHandler}\r\n                    />\r\n                    <Route path={this.props.match.path + '/contact-form'}\r\n                        component={ContactData}\r\n\r\n                    // Managing state through Redux                        \r\n                    // render={(routeProps) => (\r\n                    //     <ContactData\r\n                    //         {...routeProps}\r\n                    //         ingredients={this.props.ing}\r\n                    //         price={this.props.price}\r\n                    //     />\r\n                    // )}\r\n                    />\r\n                </React.Fragment>\r\n            );\r\n        }\r\n\r\n        else {\r\n            return <Redirect to=\"/\" />\r\n            // return this.state.error ? <p style={{ textAlign: 'center', fontSize: 'xx-large' }}>\r\n            // Something went wrong. Please refresh!</p> : <Spinner />;\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ing: state.ing.ingredients,\r\n        price: state.price.totalPrice\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Checkout);"],"sourceRoot":""}